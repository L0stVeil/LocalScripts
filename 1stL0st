-- i didn't obfuscate it cuz it will probably get patched already
local s = game:GetService("ReplicatedStorage")
local w = game:GetService("Workspace")
local p = game:GetService("Players").LocalPlayer
local r = game:GetService("RunService")
local u = game:GetService("UserInputService")
local h = pcall(function() return game:GetService("HttpService") end) and game:GetService("HttpService") or nil
local b = game:GetService("BadgeService")
local c = game:GetService("CoreGui")
local a, i, d, t = false, false, false, false
local k = Enum.KeyCode.F4
local x = "discord.gg/sdTJZyq7CS"
local n = {}
local y = false
local q = false
local j = false
local g = 0
local v = false
local o = false

local function f() return true end
local function l(z) return z end

getgenv().PlaceDefaults = f
getgenv().Label = l

local m = typeof(fireproximityprompt) == "function"
local e = typeof(setclipboard) == "function"
local z = h ~= nil
local ex = identifyexecutor and identifyexecutor() or getexecutorname and getexecutorname() or "Unknown"

local function cm(fn)
    if fn and getgenv()[fn] and typeof(getgenv()[fn]) == "function" then
        return getgenv()[fn]()
    else
        return "Command not found"
    end
end

getgenv().mxxerExec = cm

if _G.mxxerLoaded then
    j = true
    local ui = _G.mxxerUI
    if ui then pcall(function() ui:Destroy() end) end
    task.wait(0.5)
end

_G.mxxerLoaded = true
local lib = loadstring(game:HttpGet('https://raw.githubusercontent.com/Loco-CTO/UI-Library/main/VisionLibV2/source.lua'))()

local function cs()
    if y then return true end
    if q then
        q = false
        return false
    end
    return false
end

local function chk(st)
    if st then
        return true
    else
        return false
    end
end

local function nt(tl, ms)
    if cs() then return end
    
    for _, nx in ipairs(n) do
        if nx.t == tl and nx.m == ms then
            return
        end
    end
    
    local ntf = {t = tl, m = ms, x = tick()}
    table.insert(n, ntf)
    
    local sk = false
    if (tl:lower():find("work") or tl:lower():find("error fixed") or tl:lower():find("all features")) then
        sk = true
    end
    
    if not sk then
        pcall(function()
            lib:Notify({Name = tl, Text = ms, Icon = "rbxassetid://11401835376", Duration = 3, Color = Color3.fromRGB(255, 0, 0)})
        end)
    end
    
    if tl:lower():find("executed again") then
        if t then
            g = 0
            local sp = getgenv().stopTpwalk
            if sp and typeof(sp) == "function" then
                sp()
            end
        end
    end
    
    task.delay(3, function()
        for i, nx in ipairs(n) do
            if nx == ntf then
                table.remove(n, i)
                break
            end
        end
    end)
end

local function neg()
    if p:FindFirstChild("leaderstats") then
        local pts = p.leaderstats:FindFirstChild("Points")
        if pts and tonumber(pts.Value) and pts.Value <= -9223372036854775000 then
            return true
        end
    end
    return false
end

local function gp()
    if p:FindFirstChild("leaderstats") then
        local pts = p.leaderstats:FindFirstChild("Points")
        if pts and tonumber(pts.Value) then
            return tonumber(pts.Value)
        end
    end
    return 0
end

local function ap(amt)
    if cs() then return end
    
    local rm = s:FindFirstChild("PurchaseSkinStats")
    if not rm then
        nt("error", "cant find points remote")
        return
    end
    
    if neg() then
        nt("negative", "points too negative")
        return
    end
    
    if type(amt) == "string" and amt:match("%D") then
        nt("error", "put number only")
        return
    end
    
    local num = tonumber(amt)
    if not num then
        nt("error", "put number only")
        return
    end
    
    if num <= 0 then
        nt("error", "number must be positive")
        return
    end
    
    if num > 1000000000 then
        nt("error", "max is 1B")
        num = 1000000000
    end
    
    pcall(function()
        rm:FireServer(-num, "l0stveil", "was here")
        nt("points", "got " .. num .. " points")
    end)
    
    task.spawn(function()
        task.wait(3)
        if neg() then
            nt("negative", "points negative")
        end
    end)
end

local function rp(amt)
    if cs() then return end
    
    local rm = s:FindFirstChild("PurchaseSkinStats")
    if not rm then
        nt("error", "cant find points remote")
        return
    end
    
    local cur = gp()
    if cur <= 0 then
        nt("error", "no points to remove")
        return
    end
    
    if type(amt) == "string" and amt:match("%D") then
        nt("error", "put number only")
        return
    end
    
    local num = tonumber(amt)
    if not num then
        nt("error", "put number only")
        return
    end
    
    if num <= 0 then
        nt("error", "number must be positive")
        return
    end
    
    if num > 1000000000 then
        nt("error", "max is 1B")
        num = 1000000000
    end
    
    if num > cur then
        num = cur
        nt("info", "removing all points: " .. cur)
    end
    
    pcall(function()
        rm:FireServer(num, "l0stveil", "was here")
        nt("points", "reset " .. num .. " points")
    end)
end

local function ra()
    if cs() then return end
    
    local rm = s:FindFirstChild("PurchaseSkinStats")
    if not rm then
        nt("error", "cant find points remote")
        return
    end
    
    local cur = gp()
    if cur <= 0 then
        nt("error", "no points to remove")
        return
    end
    
    pcall(function()
        rm:FireServer(cur, "l0stveil", "was here")
        nt("points", "reset all points: " .. cur)
    end)
end
getgenv().getPoints = ap
getgenv().resetPoints = rp
getgenv().resetAllPoints = ra

local function pr()
    if cs() then return end
    
    if not m then
        nt("error", "cant fire prompts")
        a = false
        return
    end
    
    if not a or i or d then return end
    
    i = true
    task.spawn(function()
        while a and not d do
            for _, wn in ipairs({"World1: Park", "World2: Desert", "World3: Classic"}) do
                local wd = w:FindFirstChild(wn)
                if wd then
                    for _, np in ipairs({"WorldOneNPC", "WorldTwoNPC", "WorldThreeNPC"}) do
                        local npc = wd:FindFirstChild(np)
                        if npc then
                            for _, ch in ipairs(npc:GetChildren()) do
                                for __, pp in ipairs(ch:GetDescendants()) do
                                    if pp:IsA("ProximityPrompt") then
                                        pcall(function() fireproximityprompt(pp) end)
                                    end
                                end
                            end
                        end
                    end
                end
            end
            task.wait(0.7)
        end
        i = false
    end)
end

local function gi(it)
    if cs() then return end
    
    local rm = s:FindFirstChild("PurchaseSkinStats")
    if not rm then
        nt("error", "cant find item remote")
        return
    end
    
    if neg() then
        nt("negative", "points too negative")
        return
    end
    
    local items = {
        sandwich = {0, "ownsSandwich", 3231787346},
        green = {0, "ownsGreen", 2662670637},
        red = {0, "ownsRed", 2662670637},
        blue = {0, "ownsBlue", 2662670637},
        chocolate = {0, "ownsChocolate", 3231787346},
        strawberry = {0, "ownsStrawberry", 3231787346},
        blueberry = {0, "ownsBlueberry", 3231787346}
    }
    
    if not it or it == "" then
        nt("error", "pick item first")
        return
    end
    
    local lw = string.lower(it)
    
    if p:FindFirstChild("Stats") and p.Stats:FindFirstChild("EquippedSkin") then
        local eq = p.Stats.EquippedSkin
        for _, v in pairs(eq:GetChildren()) do
            if v.Name:lower():find(lw) and v.Value then
                nt("already", "you own this item!")
                return
            end
        end
    end
    
    local itm = items[lw]
    if itm then
        pcall(function() rm:FireServer(unpack(itm)) end)
        nt("item", "got " .. lw)
    else
        nt("error", "pick item first")
    end
end
getgenv().getItem = gi

local sd = false
local cn = nil

local function tp(spd)
    if cs() then return end
    
    local num = tonumber(spd)
    if not num or num < 1 then num = 5 end
    if num > 10 then num = 10 end
    
    g = num
    
    if t then 
        nt("tpwalk", "speed updated to " .. g)
        return
    end
    
    local ch = p.Character
    if not ch then
        nt("error", "no character")
        return
    end
    
    local hm = ch:FindFirstChildWhichIsA("Humanoid")
    if not hm then
        nt("error", "no humanoid")
        return
    end
    
    t = true
    nt("tpwalk", "enabled at speed " .. g)
    
    local cc
    cc = p.CharacterAdded:Connect(function()
        if cn then
            cn:Disconnect()
            cn = nil
        end
        t = false
        cc:Disconnect()
        nt("tpwalk", "char reset, stopped")
    end)
    
    if cn then
        cn:Disconnect()
    end
    
    cn = r.Heartbeat:Connect(function(dt)
        if not t then 
            cn:Disconnect()
            cn = nil
            return
        end
        
        if ch and ch.Parent and hm and hm.Parent then
            if hm.MoveDirection.Magnitude > 0 then
                ch:TranslateBy(hm.MoveDirection * g * dt * 10)
            end
        else
            ch = p.Character
            if ch then 
                hm = ch:FindFirstChildWhichIsA("Humanoid")
            end
            
            if not ch or not hm then
                t = false
                if cn then
                    cn:Disconnect()
                    cn = nil
                end
                nt("tpwalk", "lost char, stopped")
            end
        end
    end)
end
getgenv().startTpwalk = tp

local function st()
    if cs() then return end
    
    t = false
    if cn then
        cn:Disconnect()
        cn = nil
    end
    nt("tpwalk", "stopped")
end
getgenv().stopTpwalk = st

local function hb(id)
    local has = false
    
    pcall(function()
        has = b:UserHasBadgeAsync(p.UserId, id)
    end)
    
    if not has then
        pcall(function()
            if p:FindFirstChild("Badges") and p.Badges:FindFirstChild(tostring(id)) then
                has = true
            end
        end)
    end
    
    return has
end

local function gb(wid)
    if cs() then return end
    
    local wr = s:FindFirstChild("WorldsRemoteEvents")
    if not wr or not wr:FindFirstChild("UpdateWorldStats") then
        nt("error", "badge remote missing")
        return
    end
    
    if wid == 2 then
        local id = "3464983387645247"
        if hb(id) then
            nt("already", "already have world 2 badge")
            return
        end
        pcall(function()
            wr.UpdateWorldStats:FireServer(2)
            nt("badges", "got world 2 badge")
        end)
    elseif wid == 3 then
        local id = "2170656826015910"
        if hb(id) then
            nt("already", "already have world 3 badge")
            return
        end
        pcall(function()
            wr.UpdateWorldStats:FireServer(3)
            nt("badges", "got world 3 badge")
        end)
    end
end
getgenv().getBadge = function(id) gb(id) end

local function cd()
    if cs() then return end
    
    pcall(function()
        setclipboard(x)
        nt("discord", "server link copied")
    end)
end
getgenv().copyDiscord = cd

local function des()
    a = false
    t = false
    if cn then
        cn:Disconnect()
        cn = nil
    end
    d = true
    local ui = _G.mxxerUI
    if ui then
        pcall(function()
            for _, tb in pairs(ui.Tabs) do
                for _, sc in pairs(tb.Sections) do
                    for _, el in pairs(sc.Elements) do
                        if el.Type == "Toggle" and el.Value then
                            el:Set(false)
                        end
                    end
                end
            end
        end)
    end
    nt("destroy", "all disabled")
    task.wait(1)
    pcall(function() lib:Destroy() end)
    _G.mxxerUI = nil
    _G.mxxerLoaded = false
end
getgenv().destroyUI = des

local function rex()
    a = false
    t = false
    if cn then
        cn:Disconnect()
        cn = nil
    end
    d = true
    nt("info", "executed again, disabling all")
    
    local ui = _G.mxxerUI
    if ui then
        pcall(function()
            for _, tb in pairs(ui.Tabs) do
                for _, sc in pairs(tb.Sections) do
                    for _, el in pairs(sc.Elements) do
                        if el.Type == "Toggle" and el.Value then
                            el:Set(false)
                        end
                    end
                end
            end
        end)
    end
end

local rm = s:FindFirstChild("PurchaseSkinStats")

local ui
pcall(function()
    ui = lib:Create({
        Name = "Steal Ice Cream from Kids! 🍦|HUB",
        Footer = "made by l0stveil aka mxxer | " .. ex,
        ToggleKey = k,
        LoadedCallback = function()
            local ms = {}
            
            if not m then table.insert(ms, "No fireproximityprompt") end
            if not e then table.insert(ms, "No setclipboard") end
            if not z then table.insert(ms, "No HttpService") end
            
            if #ms > 0 then
                nt("exploit", ex .. ": " .. table.concat(ms, ", "))
            end
            
            if j then
                rex()
            end
            
            if not rm then
                nt("warning", "points remote not found")
            end
        end,
        KeySystem = false,
        ToggledRelativeYOffset = 0,
        ZIndexOffset = 500,
        Parent = c
    })
end)

if not ui then
    return
end

_G.mxxerUI = ui

local mt = ui:Tab({Name = "main", Icon = "rbxassetid://11396131982", Color = Color3.new(1, 0, 0)})

local pv = "1000"
local ps = mt:Section({Name = "points"})
ps:SmallTextbox({
    Name = "points amount",
    Default = "1000",
    Callback = function(tx)
        if tx and tx ~= "" then
            if not tx:match("%D") then
                if tonumber(tx) <= 1000000000 then
                    pv = tx
                else
                    nt("error", "max is 1B")
                    pv = "1000000000"
                end
            else
                nt("error", "put number only")
            end
        end
    end
})

ps:Button({
    Name = "get points",
    Callback = function()
        ap(pv)
    end
})

local rv = "1000"
ps:SmallTextbox({
    Name = "reset amount",
    Default = "1000",
    Callback = function(tx)
        if tx and tx ~= "" then
            if not tx:match("%D") then
                if tonumber(tx) <= 1000000000 then
                    rv = tx
                else
                    nt("error", "max is 1B")
                    rv = "1000000000"
                end
            else
                nt("error", "put number only")
            end
        end
    end
})

ps:Button({
    Name = "reset points",
    Callback = function()
        rp(rv)
    end
})

ps:Button({
    Name = v and "confirm reset all" or "reset all points",
    Callback = function()
        if not v then
            v = true
            nt("warning", "click again to reset ALL points")
            
            task.spawn(function()
                task.wait(5)
                v = false
            end)
            return
        end
        
        v = false
        ra()
    end
})

_G._item = "Sandwich"
local is = mt:Section({Name = "item"})
is:Dropdown({
    Name = "item type",
    Default = "Sandwich",
    Items = {"Sandwich", "Green", "Red", "Blue", "Chocolate", "Strawberry", "Blueberry"},
    Callback = function(it)
        _G._item = it
    end
})
is:Button({
    Name = "get item",
    Callback = function()
        if _G._item then
            gi(_G._item)
        else
            nt("error", "pick item first")
        end
    end
})

local ns = mt:Section({Name = "npc"})
ns:Toggle({
    Name = "auto prompt",
    Default = false,
    Callback = function(on)
        a = on
        if not m and on then
            nt("error", "cant fire prompts")
            a = false
            return
        end
        
        if on then
            nt("prompt", "started auto prompt")
            pr()
        else
            nt("prompt", "stopped auto prompt")
            i = false
        end
    end
})

_G._badge = "World 2 Badge"
ns:Dropdown({
    Name = "badge giver",
    Default = "World 2 Badge",
    Items = {"World 2 Badge", "World 3 Badge"},
    Callback = function(it)
        _G._badge = it
    end
})

ns:Button({
    Name = "get badge",
    Callback = function()
        if _G._badge == "World 2 Badge" then
            gb(2)
        elseif _G._badge == "World 3 Badge" then
            gb(3)
        end
    end
})

local mv = mt:Section({Name = "movement"})
mv:Slider({
    Name = "speed value",
    Min = 1,
    Max = 10,
    Default = 5,
    Callback = function(sl)
        g = sl
        if t then
            tp(sl)
        end
    end
})

mv:Toggle({
    Name = "tpwalk",
    Default = false,
    Callback = function(on)
        if on then
            tp(g)
        else
            st()
        end
    end
})

local mc = ui:Tab({Name = "misc", Icon = "rbxassetid://6031075938", Color = Color3.new(0, 1, 1)})
local st = mc:Section({Name = "settings"})

st:Keybind({
    Name = "toggle keybind",
    Default = k,
    Callback = function() end,
    UpdateKeyCallback = function(nk)
        k = nk
        pcall(function()
            ui:ChangeTogglekey(nk)
        end)
    end
})

st:Button({
    Name = "destroy ui",
    Callback = function()
        des()
    end
})

local cr = mc:Section({Name = "credits"})
cr:Button({
    Name = "l0stveil",
    Callback = function()
        nt("creator", "script by l0stveil")
    end
})
cr:Button({
    Name = "made with sigma spy by depso - copy",
    Callback = function()
        pcall(function()
            setclipboard('loadstring(game:HttpGet("https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main/Main.lua"), "Sigma Spy")()')
            nt("credits", "copied sigma spy")
        end)
    end
})
cr:Button({
    Name = "copy discord server (i have low members)",
    Callback = function()
        cd()
    end
})

pcall(function()
    u.InputBegan:Connect(function(inp, gp)
        if gp then return end
        if inp.KeyCode == k then
            pcall(function()
                ui:Toggle()
            end)
        end
    end)
end)

if ui.OnMinimize then
    ui.OnMinimize:Connect(function(mn)
        if mn then
            d = true
            a = false
            t = false
            if cn then
                cn:Disconnect()
                cn = nil
            end
        else
            d = false
        end
    end)
end

if ui.OnDestroy then
    ui.OnDestroy:Connect(function()
        a = false
        t = false
        if cn then
            cn:Disconnect()
            cn = nil
        end
        d = true
        _G.mxxerLoaded = false
    end)
end

local gf = ui.GUI or ui.MainFrame
if not gf then
    gf = Instance.new("ScreenGui")
    gf.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gf.DisplayOrder = 999
    gf.IgnoreGuiInset = true
    gf.ResetOnSpawn = false
    
    for _, nx in pairs(gf:GetDescendants()) do
        if nx:IsA("Frame") or nx:IsA("TextLabel") or nx:IsA("TextButton") or nx:IsA("ImageLabel") or nx:IsA("ImageButton") then
            nx.ZIndex = nx.ZIndex + 500
        end
    end
end

pcall(function() gf.Parent = c end)
